#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <vector>

const int buffer_size = 10;  
const int num_producers = 2; 
const int num_consumers = 3; 
std::vector<int> buffer(buffer_size); 

std::mutex mtx; 
std::condition_variable producer_cv, consumer_cv; 
int items_in_buffer = 0; 

void producer(int id) {
    for (int i = 0; i < 5; ++i) { 
        int item = i + 1;

        
        std::unique_lock<std::mutex> lock(mtx);

        
        while (items_in_buffer == buffer_size) {
            producer_cv.wait(lock);
        }

        
        buffer[items_in_buffer++] = item;
        std::cout << "Producer " << id << " produced item " << item << std::endl;

        
        consumer_cv.notify_one();
    }
}

void consumer(int id) {
    for (int i = 0; i < 5; ++i) { 
        
        std::unique_lock<std::mutex> lock(mtx);

        
        while (items_in_buffer == 0) {
            consumer_cv.wait(lock);
        }

        
        int item = buffer[--items_in_buffer];
        std::cout << "Consumer " << id << " consumed item " << item << std::endl;

        
        producer_cv.notify_one();
    }
}

int main() {
    std::vector<std::thread> producers, consumers;

    for (int i = 0; i < num_producers; ++i) {
        producers.emplace_back(producer, i);
    }

    for (int i = 0; i < num_consumers; ++i) {
        consumers.emplace_back(consumer, i);
    }

    for (auto& producer_thread : producers) {
        producer_thread.join();
    }

    for (auto& consumer_thread : consumers) {
        consumer_thread.join();
    }

    return 0;
}
