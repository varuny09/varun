#include <iostream>
#include <vector>

struct Process {
    int id;
    int burst_time;
};

void calculateFCFS(std::vector<Process>& processes) {
    int n = processes.size();
    int waiting_time = 0;
    int turnaround_time = 0;

    for (int i = 0; i < n; ++i) {
        turnaround_time += processes[i].burst_time;
        waiting_time += turnaround_time - processes[i].burst_time;

        std::cout << "Process " << processes[i].id << ": Waiting Time = " << waiting_time - processes[i].burst_time
                  << ", Turnaround Time = " << turnaround_time << std::endl;
    }

    double avg_waiting_time = static_cast<double>(waiting_time) / n;
    double avg_turnaround_time = static_cast<double>(turnaround_time) / n;

    std::cout << "Average Waiting Time: " << avg_waiting_time << std::endl;
    std::cout << "Average Turnaround Time: " << avg_turnaround_time << std::endl;
}

int main() {
    std::vector<Process> processes = {
        {1, 6},
        {2, 8},
        {3, 2},
        {4, 4},
    };

    calculateFCFS(processes);

    return 0;
}
