#include <iostream>
#include <vector>
#include <algorithm>

struct Process {
    int id;
    int burst_time;
};

bool compareBurstTime(const Process& a, const Process& b) {
    return a.burst_time < b.burst_time;
}

void calculateSJF(std::vector<Process>& processes) {
    int n = processes.size();
    std::sort(processes.begin(), processes.end(), compareBurstTime);

    int current_time = 0;
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    for (int i = 0; i < n; ++i) {
        Process& current_process = processes[i];
        int waiting_time = current_time;
        int turnaround_time = waiting_time + current_process.burst_time;

        total_waiting_time += waiting_time;
        total_turnaround_time += turnaround_time;

        std::cout << "Process " << current_process.id << ": Waiting Time = " << waiting_time
                  << ", Turnaround Time = " << turnaround_time << std::endl;

        current_time += current_process.burst_time;
    }

    double avg_waiting_time = static_cast<double>(total_waiting_time) / n;
    double avg_turnaround_time = static_cast<double>(total_turnaround_time) / n;

    std::cout << "Average Waiting Time: " << avg_waiting_time << std::endl;
    std::cout << "Average Turnaround Time: " << avg_turnaround_time << std::endl;
}

int main() {
    std::vector<Process> processes = {
        {1, 6},
        {2, 8},
        {3, 2},
        {4, 4},
    };

    calculateSJF(processes);

    return 0;
}
