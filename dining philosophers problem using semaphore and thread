#include <iostream>
#include <thread>
#include <mutex>
#include <semaphore.h>
#include <vector>
#include <chrono>

const int num_philosophers = 5;
sem_t forks[num_philosophers];
std::mutex console_mutex;

void think(int id) {
    {
        std::lock_guard<std::mutex> lock(console_mutex);
        std::cout << "Philosopher " << id << " is thinking." << std::endl;
    }
    std::this_thread::sleep_for(std::chrono::milliseconds(1000)); // Simulate thinking
}

void eat(int id) {
    {
        std::lock_guard<std::mutex> lock(console_mutex);
        std::cout << "Philosopher " << id << " is eating." << std::endl;
    }
    std::this_thread::sleep_for(std::chrono::milliseconds(1000)); // Simulate eating
}

void philosopher(int id) {
    while (true) {
        think(id);

        
        sem_wait(&forks[id]);
        {
            std::lock_guard<std::mutex> lock(console_mutex);
            std::cout << "Philosopher " << id << " picked up left fork." << std::endl;
        }
        int right_fork = (id + 1) % num_philosophers;
        sem_wait(&forks[right_fork]);
        {
            std::lock_guard<std::mutex> lock(console_mutex);
            std::cout << "Philosopher " << id << " picked up right fork." << std::endl;
        }
        
        eat(id);
        sem_post(&forks[id]);
        {
            std::lock_guard<std::mutex> lock(console_mutex);
            std::cout << "Philosopher " << id << " put down left fork." << std::endl;
        }

        sem_post(&forks[right_fork]);
        {
            std::lock_guard<std::mutex> lock(console_mutex);
            std::cout << "Philosopher " << id << " put down right fork." << std::endl;
        }
    }
}

int main() {
    std::vector<std::thread> philosophers;
    for (int i = 0; i < num_philosophers; ++i) {
        sem_init(&forks[i], 0, 1);
    }

    for (int i = 0; i < num_philosophers; ++i) {
        philosophers.emplace_back(philosopher, i);
    }
    for (auto& philosopher_thread : philosophers) {
        philosopher_thread.join();
    }
    for (int i = 0; i < num_philosophers; ++i) {
        sem_destroy(&forks[i]);
    }

    return 0;
}
